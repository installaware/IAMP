(*  GREATIS FORM DESIGNER                         *)
(*  unit version 3.89.006                         *)
(*  Copyright (C) 2001-2013 Greatis Software      *)
(*  http://www.greatis.com/delphicb/formdes/      *)
(*  http://www.greatis.com/delphicb/formdes/faq/  *)
(*  http://www.greatis.com/bteam.html             *)

unit FDCmpPal;

{$IFDEF FDADDINCLUDE}{$I FD.INC}{$ENDIF}

interface

uses Windows, Classes, Controls, Buttons, Graphics, ComCtrls;

type
  TPaletteButton = class(TSpeedButton)
  private
    FComponentClass: TComponentClass;
  public
    property ComponentClass: TComponentClass read FComponentClass write FComponentClass;
  end;

  TFriendlyClassNameCallback = procedure(var AClassName: string) of object;

function CreatePaletteButton(AParent: TWinControl; AClass: TComponentClass; ALeft,ATop: Integer; ClickEvent: TNotifyEvent): TPaletteButton;
function CreatePaletteButtonFriendly( AParent: TWinControl;
                                      AClass: TComponentClass;
                                      ALeft,
                                      ATop: Integer;
                                      ClickEvent: TNotifyEvent;
                                      AFriendlyClassNameCallback: TFriendlyClassNameCallback ): TPaletteButton;
function CreatePalettePage(APageControl: TPageControl; ACaption: string; AClasses: array of TComponentClass; ClickEvent: TNotifyEvent): TTabSheet;
function CreatePalettePageFriendly( APageControl: TPageControl;
                                    ACaption: string;
                                    AClasses: array of TComponentClass;
                                    ClickEvent: TNotifyEvent;
                                    AFriendlyClassNameCallback: TFriendlyClassNameCallback ): TTabSheet;
procedure EditMode(APageControl: TPageControl);

implementation

{$R *.RES}

function CreatePaletteButton(AParent: TWinControl; AClass: TComponentClass; ALeft,ATop: Integer; ClickEvent: TNotifyEvent): TPaletteButton;
begin
  Result := CreatePaletteButtonFriendly(AParent, AClass, ALeft, ATop, ClickEvent, nil);
end;

function CreatePaletteButtonFriendly( AParent: TWinControl;
                                      AClass: TComponentClass;
                                      ALeft,
                                      ATop: Integer;
                                      ClickEvent: TNotifyEvent;
                                      AFriendlyClassNameCallback: TFriendlyClassNameCallback ): TPaletteButton;
var
  AClassName: string;
  IconClass: TClass;
  IconClassName: String;
begin
  Result:=TPaletteButton.Create(AParent);
  //with Result do
  begin
    ComponentClass:=AClass;
    if Assigned(ComponentClass) then
    begin
      RegisterClass(ComponentClass);

      AClassName := ComponentClass.ClassName;

      //with Glyph do
      begin
        IconClass:=ComponentClass;
        Handle:=0;
        while (Handle=0) and Assigned(IconClass) do
        begin
          IconClassName:=IconClass.ClassName;
          Handle:=LoadBitmap(HInstance,PChar(IconClassName));
          IconClass:=IconClass.ClassParent;
        end;
        if Handle=0 then Handle:=LoadBitmap(HInstance,'TCOMPONENT');
      end;

      // Make the Class Name more friendly, and set it as the Tooltip.
      if Assigned(AFriendlyClassNameCallback) then
        AFriendlyClassNameCallback(AClassName)
      else
        AClassName := Copy(AClassName, 2, Pred(Length(AClassName)));  // Just chop off the first character (which is presumably 'T').
      Hint := AClassName;
    end
    else Glyph.Handle:=LoadBitmap(HInstance,'EDITMODE');
    Left:=ALeft;
    Top:=ATop;
    Width:=28;
    Height:=28;
    Flat:=True;
    GroupIndex:=1;
    if not Assigned(ComponentClass) then Down:=True;
    ShowHint:=True;
    Parent:=AParent;
    OnClick:=ClickEvent;
  end;
end;

function CreatePalettePage(APageControl: TPageControl; ACaption: string; AClasses: array of TComponentClass; ClickEvent: TNotifyEvent): TTabSheet;
begin
  Result := CreatePalettePageFriendly(APageControl, ACaption, AClasses, ClickEvent, nil);
end;

function CreatePalettePageFriendly( APageControl: TPageControl;
                                    ACaption: string;
                                    AClasses: array of TComponentClass;
                                    ClickEvent: TNotifyEvent;
                                    AFriendlyClassNameCallback: TFriendlyClassNameCallback ): TTabSheet;
var
  i,W: Integer;
begin
  Result:=TTabSheet.Create(APageControl);
  //with Result do
  begin
    W:=CreatePaletteButton(Result,nil,0,0,ClickEvent).Width;
    for i:=Low(AClasses) to High(AClasses) do
      CreatePaletteButtonFriendly(Result,AClasses[i],Succ(i)*W+4,0,ClickEvent,AFriendlyClassNameCallback);
    Caption:=ACaption;
    PageControl:=APageControl;
  end;
end;

procedure EditMode(APageControl: TPageControl);
var
  i: Integer;
begin
  //with APageControl do
    for i:=0 to Pred(PageCount) do
      if Pages[i].Controls[0] is TPaletteButton then
        TPaletteButton(Pages[i].Controls[0]).Down:=True;
end;

end.
